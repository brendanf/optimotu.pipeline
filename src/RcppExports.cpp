// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// derep_map_only
void derep_map_only(Rcpp::List derep);
RcppExport SEXP _optimotu_pipeline_derep_map_only(SEXP derepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type derep(derepSEXP);
    derep_map_only(derep);
    return R_NilValue;
END_RCPP
}
// empirical_transition_matrix
Rcpp::IntegerMatrix empirical_transition_matrix(Rcpp::CharacterVector true_seq, Rcpp::CharacterVector obs_seq, Rcpp::CharacterVector obs_qual, Rcpp::IntegerVector match_idx, Rcpp::CharacterVector cigar, Rcpp::IntegerVector scores, bool indel);
RcppExport SEXP _optimotu_pipeline_empirical_transition_matrix(SEXP true_seqSEXP, SEXP obs_seqSEXP, SEXP obs_qualSEXP, SEXP match_idxSEXP, SEXP cigarSEXP, SEXP scoresSEXP, SEXP indelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type true_seq(true_seqSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type obs_seq(obs_seqSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type obs_qual(obs_qualSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type match_idx(match_idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type cigar(cigarSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< bool >::type indel(indelSEXP);
    rcpp_result_gen = Rcpp::wrap(empirical_transition_matrix(true_seq, obs_seq, obs_qual, match_idx, cigar, scores, indel));
    return rcpp_result_gen;
END_RCPP
}
// fasta_deline
std::string fasta_deline(const std::string infile, const std::string outfile, const bool compress);
RcppExport SEXP _optimotu_pipeline_fasta_deline(SEXP infileSEXP, SEXP outfileSEXP, SEXP compressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< const bool >::type compress(compressSEXP);
    rcpp_result_gen = Rcpp::wrap(fasta_deline(infile, outfile, compress));
    return rcpp_result_gen;
END_RCPP
}
// fastq_stage_flags
Rcpp::DataFrame fastq_stage_flags(std::string raw, std::vector<std::string> stages);
RcppExport SEXP _optimotu_pipeline_fastq_stage_flags(SEXP rawSEXP, SEXP stagesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type raw(rawSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type stages(stagesSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_stage_flags(raw, stages));
    return rcpp_result_gen;
END_RCPP
}
// fastq_stage_flag2
Rcpp::DataFrame fastq_stage_flag2(std::string raw, std::string stage1, std::string stage2);
RcppExport SEXP _optimotu_pipeline_fastq_stage_flag2(SEXP rawSEXP, SEXP stage1SEXP, SEXP stage2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type raw(rawSEXP);
    Rcpp::traits::input_parameter< std::string >::type stage1(stage1SEXP);
    Rcpp::traits::input_parameter< std::string >::type stage2(stage2SEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_stage_flag2(raw, stage1, stage2));
    return rcpp_result_gen;
END_RCPP
}
// fastq_stage_map
Rcpp::DataFrame fastq_stage_map(std::string raw, Rcpp::CharacterVector stages);
RcppExport SEXP _optimotu_pipeline_fastq_stage_map(SEXP rawSEXP, SEXP stagesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type raw(rawSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type stages(stagesSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_stage_map(raw, stages));
    return rcpp_result_gen;
END_RCPP
}
// fastq_seq_map
Rcpp::DataFrame fastq_seq_map(std::string fq_raw, std::string fq_trim, std::string fq_filt);
RcppExport SEXP _optimotu_pipeline_fastq_seq_map(SEXP fq_rawSEXP, SEXP fq_trimSEXP, SEXP fq_filtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fq_raw(fq_rawSEXP);
    Rcpp::traits::input_parameter< std::string >::type fq_trim(fq_trimSEXP);
    Rcpp::traits::input_parameter< std::string >::type fq_filt(fq_filtSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_seq_map(fq_raw, fq_trim, fq_filt));
    return rcpp_result_gen;
END_RCPP
}
// fastq_names
Rcpp::CharacterVector fastq_names(std::string x);
RcppExport SEXP _optimotu_pipeline_fastq_names(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_names(x));
    return rcpp_result_gen;
END_RCPP
}
// fastq_qual_bins
Rcpp::IntegerVector fastq_qual_bins(std::vector<std::string> fastq, int max_n, int offset);
RcppExport SEXP _optimotu_pipeline_fastq_qual_bins(SEXP fastqSEXP, SEXP max_nSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type fastq(fastqSEXP);
    Rcpp::traits::input_parameter< int >::type max_n(max_nSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_qual_bins(fastq, max_n, offset));
    return rcpp_result_gen;
END_RCPP
}
// fastq_sample_fraction
Rcpp::CharacterVector fastq_sample_fraction(const std::string& file, const int numerator, const int denominator, const std::string& output, bool rename);
RcppExport SEXP _optimotu_pipeline_fastq_sample_fraction(SEXP fileSEXP, SEXP numeratorSEXP, SEXP denominatorSEXP, SEXP outputSEXP, SEXP renameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const int >::type numerator(numeratorSEXP);
    Rcpp::traits::input_parameter< const int >::type denominator(denominatorSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output(outputSEXP);
    Rcpp::traits::input_parameter< bool >::type rename(renameSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_sample_fraction(file, numerator, denominator, output, rename));
    return rcpp_result_gen;
END_RCPP
}
// fastq_sample_fraction_multiple
Rcpp::CharacterVector fastq_sample_fraction_multiple(const std::string& file, const Rcpp::IntegerVector& numerators, const int denominator, const Rcpp::CharacterVector& output, bool rename);
RcppExport SEXP _optimotu_pipeline_fastq_sample_fraction_multiple(SEXP fileSEXP, SEXP numeratorsSEXP, SEXP denominatorSEXP, SEXP outputSEXP, SEXP renameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type numerators(numeratorsSEXP);
    Rcpp::traits::input_parameter< const int >::type denominator(denominatorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type output(outputSEXP);
    Rcpp::traits::input_parameter< bool >::type rename(renameSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_sample_fraction_multiple(file, numerators, denominator, output, rename));
    return rcpp_result_gen;
END_RCPP
}
// fastq_sample_number
Rcpp::CharacterVector fastq_sample_number(const std::string& file, const int number, const std::string& output, bool rename);
RcppExport SEXP _optimotu_pipeline_fastq_sample_number(SEXP fileSEXP, SEXP numberSEXP, SEXP outputSEXP, SEXP renameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const int >::type number(numberSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output(outputSEXP);
    Rcpp::traits::input_parameter< bool >::type rename(renameSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_sample_number(file, number, output, rename));
    return rcpp_result_gen;
END_RCPP
}
// fastq_sample_number_multiple
Rcpp::CharacterVector fastq_sample_number_multiple(const std::string& file, const Rcpp::IntegerVector& numbers, const Rcpp::CharacterVector& output, bool rename);
RcppExport SEXP _optimotu_pipeline_fastq_sample_number_multiple(SEXP fileSEXP, SEXP numbersSEXP, SEXP outputSEXP, SEXP renameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type numbers(numbersSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type output(outputSEXP);
    Rcpp::traits::input_parameter< bool >::type rename(renameSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_sample_number_multiple(file, numbers, output, rename));
    return rcpp_result_gen;
END_RCPP
}
// fastq_pair_sample_fraction
Rcpp::CharacterVector fastq_pair_sample_fraction(const std::string& file_R1, const std::string& file_R2, const int numerator, const int denominator, const std::string& output_R1, const std::string& output_R2, bool rename);
RcppExport SEXP _optimotu_pipeline_fastq_pair_sample_fraction(SEXP file_R1SEXP, SEXP file_R2SEXP, SEXP numeratorSEXP, SEXP denominatorSEXP, SEXP output_R1SEXP, SEXP output_R2SEXP, SEXP renameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file_R1(file_R1SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file_R2(file_R2SEXP);
    Rcpp::traits::input_parameter< const int >::type numerator(numeratorSEXP);
    Rcpp::traits::input_parameter< const int >::type denominator(denominatorSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_R1(output_R1SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_R2(output_R2SEXP);
    Rcpp::traits::input_parameter< bool >::type rename(renameSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_pair_sample_fraction(file_R1, file_R2, numerator, denominator, output_R1, output_R2, rename));
    return rcpp_result_gen;
END_RCPP
}
// fastq_pair_sample_fraction_multiple
Rcpp::List fastq_pair_sample_fraction_multiple(const std::string& file_R1, const std::string& file_R2, const Rcpp::IntegerVector& numerators, const int denominator, const Rcpp::CharacterVector& output_R1, const Rcpp::CharacterVector& output_R2, bool rename);
RcppExport SEXP _optimotu_pipeline_fastq_pair_sample_fraction_multiple(SEXP file_R1SEXP, SEXP file_R2SEXP, SEXP numeratorsSEXP, SEXP denominatorSEXP, SEXP output_R1SEXP, SEXP output_R2SEXP, SEXP renameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file_R1(file_R1SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file_R2(file_R2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type numerators(numeratorsSEXP);
    Rcpp::traits::input_parameter< const int >::type denominator(denominatorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type output_R1(output_R1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type output_R2(output_R2SEXP);
    Rcpp::traits::input_parameter< bool >::type rename(renameSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_pair_sample_fraction_multiple(file_R1, file_R2, numerators, denominator, output_R1, output_R2, rename));
    return rcpp_result_gen;
END_RCPP
}
// fastq_pair_sample_number
Rcpp::CharacterVector fastq_pair_sample_number(const std::string& file_R1, const std::string& file_R2, const int number, const std::string& output_R1, const std::string& output_R2, bool rename);
RcppExport SEXP _optimotu_pipeline_fastq_pair_sample_number(SEXP file_R1SEXP, SEXP file_R2SEXP, SEXP numberSEXP, SEXP output_R1SEXP, SEXP output_R2SEXP, SEXP renameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file_R1(file_R1SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file_R2(file_R2SEXP);
    Rcpp::traits::input_parameter< const int >::type number(numberSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_R1(output_R1SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_R2(output_R2SEXP);
    Rcpp::traits::input_parameter< bool >::type rename(renameSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_pair_sample_number(file_R1, file_R2, number, output_R1, output_R2, rename));
    return rcpp_result_gen;
END_RCPP
}
// fastq_pair_sample_number_multiple
Rcpp::List fastq_pair_sample_number_multiple(const std::string& file_R1, const std::string& file_R2, const Rcpp::IntegerVector& numbers, const Rcpp::CharacterVector& output_R1, const Rcpp::CharacterVector& output_R2, bool rename);
RcppExport SEXP _optimotu_pipeline_fastq_pair_sample_number_multiple(SEXP file_R1SEXP, SEXP file_R2SEXP, SEXP numbersSEXP, SEXP output_R1SEXP, SEXP output_R2SEXP, SEXP renameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file_R1(file_R1SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file_R2(file_R2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type numbers(numbersSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type output_R1(output_R1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type output_R2(output_R2SEXP);
    Rcpp::traits::input_parameter< bool >::type rename(renameSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_pair_sample_number_multiple(file_R1, file_R2, numbers, output_R1, output_R2, rename));
    return rcpp_result_gen;
END_RCPP
}
// fastq_sample
std::string fastq_sample(const std::string& infile, const std::string& outfile, const int n, const Rcpp::IntegerVector sample, const bool rename);
RcppExport SEXP _optimotu_pipeline_fastq_sample(SEXP infileSEXP, SEXP outfileSEXP, SEXP nSEXP, SEXP sampleSEXP, SEXP renameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const bool >::type rename(renameSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_sample(infile, outfile, n, sample, rename));
    return rcpp_result_gen;
END_RCPP
}
// fastq_combine
std::string fastq_combine(const std::vector<std::string>& infiles, const std::string outfile, const bool compress);
RcppExport SEXP _optimotu_pipeline_fastq_combine(SEXP infilesSEXP, SEXP outfileSEXP, SEXP compressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type infiles(infilesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< const bool >::type compress(compressSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_combine(infiles, outfile, compress));
    return rcpp_result_gen;
END_RCPP
}
// fasta_combine
std::string fasta_combine(const std::vector<std::string>& infiles, const std::string outfile, const bool compress);
RcppExport SEXP _optimotu_pipeline_fasta_combine(SEXP infilesSEXP, SEXP outfileSEXP, SEXP compressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type infiles(infilesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< const bool >::type compress(compressSEXP);
    rcpp_result_gen = Rcpp::wrap(fasta_combine(infiles, outfile, compress));
    return rcpp_result_gen;
END_RCPP
}
// fastq_rename
std::string fastq_rename(std::string infile, Rcpp::CharacterVector names, std::string outfile);
RcppExport SEXP _optimotu_pipeline_fastq_rename(SEXP infileSEXP, SEXP namesSEXP, SEXP outfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_rename(infile, names, outfile));
    return rcpp_result_gen;
END_RCPP
}
// fasta_rename
std::string fasta_rename(std::string infile, Rcpp::CharacterVector names, std::string outfile);
RcppExport SEXP _optimotu_pipeline_fasta_rename(SEXP infileSEXP, SEXP namesSEXP, SEXP outfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    rcpp_result_gen = Rcpp::wrap(fasta_rename(infile, names, outfile));
    return rcpp_result_gen;
END_RCPP
}
// fastq_split
Rcpp::CharacterVector fastq_split(std::string infile, std::vector<std::string> outfiles, bool compress);
RcppExport SEXP _optimotu_pipeline_fastq_split(SEXP infileSEXP, SEXP outfilesSEXP, SEXP compressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type outfiles(outfilesSEXP);
    Rcpp::traits::input_parameter< bool >::type compress(compressSEXP);
    rcpp_result_gen = Rcpp::wrap(fastq_split(infile, outfiles, compress));
    return rcpp_result_gen;
END_RCPP
}
// fasta_split
Rcpp::CharacterVector fasta_split(std::string infile, std::vector<std::string> outfiles, bool compress);
RcppExport SEXP _optimotu_pipeline_fasta_split(SEXP infileSEXP, SEXP outfilesSEXP, SEXP compressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type outfiles(outfilesSEXP);
    Rcpp::traits::input_parameter< bool >::type compress(compressSEXP);
    rcpp_result_gen = Rcpp::wrap(fasta_split(infile, outfiles, compress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_optimotu_pipeline_derep_map_only", (DL_FUNC) &_optimotu_pipeline_derep_map_only, 1},
    {"_optimotu_pipeline_empirical_transition_matrix", (DL_FUNC) &_optimotu_pipeline_empirical_transition_matrix, 7},
    {"_optimotu_pipeline_fasta_deline", (DL_FUNC) &_optimotu_pipeline_fasta_deline, 3},
    {"_optimotu_pipeline_fastq_stage_flags", (DL_FUNC) &_optimotu_pipeline_fastq_stage_flags, 2},
    {"_optimotu_pipeline_fastq_stage_flag2", (DL_FUNC) &_optimotu_pipeline_fastq_stage_flag2, 3},
    {"_optimotu_pipeline_fastq_stage_map", (DL_FUNC) &_optimotu_pipeline_fastq_stage_map, 2},
    {"_optimotu_pipeline_fastq_seq_map", (DL_FUNC) &_optimotu_pipeline_fastq_seq_map, 3},
    {"_optimotu_pipeline_fastq_names", (DL_FUNC) &_optimotu_pipeline_fastq_names, 1},
    {"_optimotu_pipeline_fastq_qual_bins", (DL_FUNC) &_optimotu_pipeline_fastq_qual_bins, 3},
    {"_optimotu_pipeline_fastq_sample_fraction", (DL_FUNC) &_optimotu_pipeline_fastq_sample_fraction, 5},
    {"_optimotu_pipeline_fastq_sample_fraction_multiple", (DL_FUNC) &_optimotu_pipeline_fastq_sample_fraction_multiple, 5},
    {"_optimotu_pipeline_fastq_sample_number", (DL_FUNC) &_optimotu_pipeline_fastq_sample_number, 4},
    {"_optimotu_pipeline_fastq_sample_number_multiple", (DL_FUNC) &_optimotu_pipeline_fastq_sample_number_multiple, 4},
    {"_optimotu_pipeline_fastq_pair_sample_fraction", (DL_FUNC) &_optimotu_pipeline_fastq_pair_sample_fraction, 7},
    {"_optimotu_pipeline_fastq_pair_sample_fraction_multiple", (DL_FUNC) &_optimotu_pipeline_fastq_pair_sample_fraction_multiple, 7},
    {"_optimotu_pipeline_fastq_pair_sample_number", (DL_FUNC) &_optimotu_pipeline_fastq_pair_sample_number, 6},
    {"_optimotu_pipeline_fastq_pair_sample_number_multiple", (DL_FUNC) &_optimotu_pipeline_fastq_pair_sample_number_multiple, 6},
    {"_optimotu_pipeline_fastq_sample", (DL_FUNC) &_optimotu_pipeline_fastq_sample, 5},
    {"_optimotu_pipeline_fastq_combine", (DL_FUNC) &_optimotu_pipeline_fastq_combine, 3},
    {"_optimotu_pipeline_fasta_combine", (DL_FUNC) &_optimotu_pipeline_fasta_combine, 3},
    {"_optimotu_pipeline_fastq_rename", (DL_FUNC) &_optimotu_pipeline_fastq_rename, 3},
    {"_optimotu_pipeline_fasta_rename", (DL_FUNC) &_optimotu_pipeline_fasta_rename, 3},
    {"_optimotu_pipeline_fastq_split", (DL_FUNC) &_optimotu_pipeline_fastq_split, 3},
    {"_optimotu_pipeline_fasta_split", (DL_FUNC) &_optimotu_pipeline_fasta_split, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_optimotu_pipeline(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
